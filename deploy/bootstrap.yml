AWSTemplateFormatVersion: "2010-09-09"
Description: Initial resources for an iamzero deployment

Parameters:
  AccessLogsBucket:
    Type: String
    Description: Optional external bucket name for storing S3 access logs. If blank, the iamzero audit bucket is used.
    AllowedPattern: "^([a-z0-9.-]{3,63})?$"
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    MinValue: 1
  CustomDomain:
    Type: String
    Description: The FQDN that will be used by the web application (defaults to autogenerated ALB URL)
    # Example: "app.example.com"
    AllowedPattern: '^([a-z0-9.-]+\.[a-z]{2,})?$'
  EnableS3AccessLogs:
    Type: String
    Description: Enable S3 access logging for iamzero audit log bucket
    AllowedValues: [true, false]
  LoadBalancerSecurityGroupCidr:
    Type: String
    Description: Allow HTTP(S) ingress access to the web app (ALB) security group from this IP block. Use 0.0.0.0/0 to allow unrestricted access
    # cfn-lint suggested this regex pattern:
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  SecurityGroupID:
    Type: String
    Description: (Only if existing VPC is used) an existing SecurityGroup to deploy iamzero into
    AllowedPattern: "^(sg-[0-9a-f]{10,})?$"
  SubnetOneIPRange:
    Type: String
    Description: (Only if existing VPC is used) a valid & available IP range in the existing VPC to deploy iamzero into.
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  SubnetTwoIPRange:
    Type: String
    Description: (Only if existing VPC is used) a second valid & available IP range in the existing VPC to deploy iamzero into.
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  VpcID:
    Type: String
    Description: An existing VPC to deploy iamzero into
    AllowedPattern: "^(vpc-[0-9a-f]{4,})?$"
  SubnetOneID:
    Type: String
    Description: An existing subnet to deploy iamzero into. You must specify 'SubnetTwoID' if you specify this parameter
    AllowedPattern: "^(subnet-[0-9a-f]{4,})?$"
  SubnetTwoID:
    Type: String
    Description: An existing subnet to deploy iamzero into. You must specify 'SubnetOneID' if you specify this parameter
    AllowedPattern: "^(subnet-[0-9a-f]{4,})?$"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/24
    PublicOne:
      CIDR: 10.0.0.0/26
    PublicTwo:
      CIDR: 10.0.0.64/26

  ELBAccounts: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      ARN: arn:aws:iam::127311923021:root
    us-east-2:
      ARN: arn:aws:iam::033677994240:root
    us-west-1:
      ARN: arn:aws:iam::027434742980:root
    us-west-2:
      ARN: arn:aws:iam::797873946194:root
    ca-central-1:
      ARN: arn:aws:iam::985666609251:root
    eu-central-1:
      ARN: arn:aws:iam::054676820928:root
    eu-west-1:
      ARN: arn:aws:iam::156460612806:root
    eu-west-2:
      ARN: arn:aws:iam::652711504416:root
    eu-west-3:
      ARN: arn:aws:iam::009996457667:root
    eu-north-1:
      ARN: arn:aws:iam::897822967062:root
    ap-east-1:
      ARN: arn:aws:iam::754344448648:root
    ap-northeast-1:
      ARN: arn:aws:iam::582318560864:root
    ap-northeast-2:
      ARN: arn:aws:iam::600734575887:root
    ap-northeast-3:
      ARN: arn:aws:iam::383597477331:root
    ap-southeast-1:
      ARN: arn:aws:iam::114774131450:root
    ap-southeast-2:
      ARN: arn:aws:iam::783225319266:root
    ap-south-1:
      ARN: arn:aws:iam::718504428378:root
    me-south-1:
      ARN: arn:aws:iam::076674570225:root
    sa-east-1:
      ARN: arn:aws:iam::507241528517:root
    us-gov-west-1:
      ARN: arn:aws-us-gov:iam::048591011584:root
    us-gov-east-1:
      ARN: arn:aws-us-gov:iam::190560391635:root
    cn-north-1:
      ARN: arn:aws-cn:iam::638102146993:root
    cn-northwest-1:
      ARN: arn:aws-cn:iam::037604701340:root

Conditions:
  EnableAccessLogs: !Equals [!Ref EnableS3AccessLogs, true]
  ExternalAccessLogs: !Not [!Equals [!Ref AccessLogsBucket, ""]]
  NotExternalAccessLogs: !Equals [!Ref AccessLogsBucket, ""]
  UseCustomDomain: !Not [!Equals [!Ref CustomDomain, ""]]
  CreateVpc: !Equals [!Ref VpcID, ""]
  CreateSubnets: !Equals [!Ref SubnetOneID, ""]

Resources:
  AuditLogs: # S3 bucket for VPC flow logs and ALB access logs
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          # Keep access logs for 1 year, permanently delete 30 days after they expire
          - ExpirationInDays: 365
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName:
            !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref "AWS::NoValue"]
          LogFilePrefix: !If
            - ExternalAccessLogs
            - !Sub iamzero-source-${AWS::AccountId}-${AWS::Region}/
            - self/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AuditLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy

    DependsOn: TargetGroup

    Properties:
      Bucket: !Ref AuditLogs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VPCFlowAclCheck
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt AuditLogs.Arn
          - Sid: VPCFlowWrite
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
          - Sid: CloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt AuditLogs.Arn
          - Sid: CloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
          - Sid: ALBWrite
            Effect: Allow # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
            Principal:
              AWS: !FindInMap [ELBAccounts, !Ref "AWS::Region", ARN]
            Action: s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
          - Sid: ForceSSL
            Effect: Deny
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${AuditLogs}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  VPC:
    Condition: CreateVpc
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        - Key: Name
          Value: iamzero-vpc

  FlowLogs:
    Condition: CreateVpc
    DependsOn: AuditLogsBucketPolicy
    Type: AWS::EC2::FlowLog
    Properties:
      # If prefix is changed, make sure to update the prefix of the source integration in self.registration.go
      LogDestination: !Sub ${AuditLogs.Arn}/${VPC}/
      LogDestinationType: s3
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: iamzero-flowlogs

  # We define a public subnet so that we can access our web server from a public IP. The empty
  # string in !GetAZs is equivalent to AWS::Region
  #
  # These subnets are labelled Public for historical reasons, but will not actually be public if a
  # private VPC is specified.
  VpcSubnetOne:
    Condition: CreateSubnets
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID
      CidrBlock: !If
        - CreateVpc
        - !FindInMap [SubnetConfig, PublicOne, CIDR]
        - !Ref SubnetOneIPRange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: iamzero-subnet-one

  VpcSubnetTwo:
    Condition: CreateSubnets
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID
      CidrBlock: !If
        - CreateVpc
        - !FindInMap [SubnetConfig, PublicTwo, CIDR]
        - !Ref SubnetTwoIPRange
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: iamzero-subnet-two

  # The lines below setup networking resources for the public subnets. Containers in the public
  # subnets have public IP addresses and the routing table sends network traffic via the IG.
  InternetGateway:
    Condition: CreateVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: iamzero-internet-gateway

  # Attach the public Internet Gateway to our VPC
  GatewayAttachment:
    Condition: CreateVpc
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Define a route table in order to map & route IP addresses
  PublicRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: iamzero-public-route-table

  # Because we have a public VPC, we need to map 0.0.0.0/0 through an Internet Gateway in order
  # to be out there in the network
  PublicRoute:
    Condition: CreateVpc
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the route table that we have created (with the mapping right above) to our public
  # subnets in order to be used by it
  VpcSubnetOneRouteTableAssociation:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !If [CreateSubnets, !Ref VpcSubnetOne, !Ref SubnetOneID]
      RouteTableId: !Ref PublicRouteTable

  VpcSubnetTwoRouteTableAssociation:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !If [CreateSubnets, !Ref VpcSubnetTwo, !Ref SubnetTwoID]
      RouteTableId: !Ref PublicRouteTable

  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: iamzero-web-lb
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref LoadBalancerSecurityGroupCidr
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref LoadBalancerSecurityGroupCidr
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: iamzero-web-lb-sg

  # This load balancer is labelled Public for historical reasons, but is not actually public if a
  # private VPC is specified.
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AuditLogsBucketPolicy
    Properties:
      Name: iamzero-web
      Scheme: !If [CreateVpc, internet-facing, internal]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
        - Key: access_logs.s3.enabled
          Value: "true"
          # Note: If we ever add access_logs.s3.prefix, make sure to update it in the source in self_registration.go
        - Key: access_logs.s3.bucket
          Value: !Ref AuditLogs
      Subnets:
        - !If [CreateSubnets, !Ref VpcSubnetOne, !Ref SubnetOneID]
        - !If [CreateSubnets, !Ref VpcSubnetTwo, !Ref SubnetTwoID]
      SecurityGroups:
        - !If [
            CreateVpc,
            !Ref PublicLoadBalancerSecurityGroup,
            !Ref SecurityGroupID,
          ]

  # A target group is connected to a network or application load balancer, so it can automatically
  # distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: iamzero-web
      HealthCheckProtocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds # Instantly deregister draining targets since we have 200% max capacity
          Value: "0"
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID

  # Adds the networking stack to a security group and exposes the necessary TCP ports that allow
  # our server to communicate with the outside world.
  WebApplicationServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: iamzero-web-container
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !If
            - CreateVpc
            - !Ref PublicLoadBalancerSecurityGroup
            - !Ref SecurityGroupID
      VpcId: !If
        - CreateVpc
        - !Ref VPC
        - !Ref VpcID
      Tags:
        - Key: Name
          Value: iamzero-web-container-sg

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref WebApplicationServerSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !If
        - CreateVpc
        - !Ref PublicLoadBalancerSecurityGroup
        - !Ref SecurityGroupID

Outputs:
  AuditLogsBucket:
    Description: S3 bucket name for iamzero audit logs (includes ALB and VPC)
    Value: !Ref AuditLogs

  # Networking + elb
  SubnetOneId:
    Description: Public subnet one
    Value: !If [CreateSubnets, !Ref VpcSubnetOne, !Ref SubnetOneID]
  SubnetTwoId:
    Description: Public subnet two
    Value: !If [CreateSubnets, !Ref VpcSubnetTwo, !Ref SubnetTwoID]
  LoadBalancerArn:
    Description: Web load balancer arn
    Value: !Ref PublicLoadBalancer
  LoadBalancerFullName:
    Description: Web load balancer full resource name
    Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName
  LoadBalancerTargetGroup:
    Description: Web load balancer distribution target group ARN
    Value: !Ref TargetGroup
  LoadBalancerUrl:
    Description: iamzero URL - application load balancer or custom domain
    Value:
      !If [
        UseCustomDomain,
        !Ref CustomDomain,
        !GetAtt PublicLoadBalancer.DNSName,
      ]
  WebSecurityGroup:
    Description: Public web app security group
    Value: !Ref WebApplicationServerSecurityGroup
